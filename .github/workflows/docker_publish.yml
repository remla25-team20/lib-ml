name: Deploy

on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]

permissions:
  contents: write  # Allows deleting tags

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ vars.RELEASE_BRANCH }}
          fetch-depth: 0

      - name: Get tag message
        id: tagmsg
        run: |
          # Show 1st line of tag and message, extract the message part, and get the first two words after tag name
          echo "tag description = $(git tag -l -n1 "v${{ env.version }}")"
          MESSAGE=$(git tag -l -n1 "v${{ env.version }}" | awk '{if (NF >= 3) print $2 " " $3 }')
          echo "message=$MESSAGE" >> "$GITHUB_OUTPUT"
          echo "message=$MESSAGE"

      - name: Cancel if tag message is not a version bump
        if: ${{ startsWith(steps.tagmsg.outputs.message, 'Bump version') }}
        run: |
          echo "Tag message starts with 'Bump version'. Skipping workflow."
#          exit 1

      - name: Parse version info from tag
        if: ${{ !startsWith(steps.tagmsg.outputs.message, 'Bump version') }}
        run: |
          # GITHUB_REF is like refs/tags/v2.3.5, so strip the first 11 chars
          VERSION=${GITHUB_REF:11}
          MAJOR=`echo "$VERSION" | cut -d . -f 1`
          MINOR=`echo "$VERSION" | cut -d . -f 2`
          PATCH=`echo "$VERSION" | cut -d . -f 3`
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV

#    TODO: checkout branch on which the tag was created (not linked to tag, need to search (branch -r ...))

      - name: Bump lib-ml package version
        if: ${{ !startsWith(steps.tagmsg.outputs.message, 'Bump version') }}
        id: bump
        uses: callowayproject/bump-my-version@master
        env:
          BUMPVERSION_COMMIT: "true"
        with:
          args: --new-version ${{ env.version }} -v
          github-token: ${{ secrets.GH_TOKEN }}
          branch: ${{ vars.RELEASE_BRANCH }}

      - name: Set git remote env variable
        if: ${{ !startsWith(steps.tagmsg.outputs.message, 'Bump version') }}
        run: |
          REMOTE_REPO="https://${GITHUB_ACTOR}:${{ secrets.GH_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
          echo "remote_repo=$REMOTE_REPO" >> $GITHUB_ENV

      - name: Delete tag version
        if: ${{ !startsWith(steps.tagmsg.outputs.message, 'Bump version') }}
        run: |
          git tag --delete v${{ env.version }}
          git push "${{ env.remote_repo }}" --delete ${GITHUB_REF}
          git tag -l

      - name: Create and push new release branch
        if: ${{ !startsWith(steps.tagmsg.outputs.message, 'Bump version') }}
        run: |
          git checkout -b "v${{ env.version }}"
          git push "${{ env.remote_repo }}" "refs/heads/v${{ env.version }}"

      - name: Re-tag version for the new commit
        if: ${{ !startsWith(steps.tagmsg.outputs.message, 'Bump version') }}
        run: |
          git tag -f v${{ env.version }} -m 'Bump version: from ${{ steps.bump.outputs.previous-version }} to ${{ steps.bump.outputs.current-version }}'
          git push "${{ env.remote_repo }}" -f "refs/tags/v${{ env.version }}"

      - name: Check if bumped
        if: steps.bump.outputs.bumped == 'true' && !startsWith(steps.tagmsg.outputs.message, 'Bump version')
        run: |
          echo "Version was bumped from ${{ steps.bump.outputs.previous-version }} to ${{ steps.bump.outputs.current-version }}!"
